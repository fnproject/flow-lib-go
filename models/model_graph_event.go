// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// ModelGraphEvent model graph event
// swagger:model modelGraphEvent
type ModelGraphEvent struct {

	// delay scheduled
	DelayScheduled *ModelDelayScheduledEvent `json:"delay_scheduled,omitempty"`

	// faas invocation completed
	FaasInvocationCompleted *ModelFaasInvocationCompletedEvent `json:"faas_invocation_completed,omitempty"`

	// faas invocation started
	FaasInvocationStarted *ModelFaasInvocationStartedEvent `json:"faas_invocation_started,omitempty"`

	// flow id
	FlowID string `json:"flow_id,omitempty"`

	// graph committed
	GraphCommitted *ModelGraphCommittedEvent `json:"graph_committed,omitempty"`

	// graph completed
	GraphCompleted *ModelGraphCompletedEvent `json:"graph_completed,omitempty"`

	// graph created
	GraphCreated *ModelGraphCreatedEvent `json:"graph_created,omitempty"`

	// graph terminating
	GraphTerminating *ModelGraphTerminatingEvent `json:"graph_terminating,omitempty"`

	// sent ts
	SentTs strfmt.DateTime `json:"sent_ts,omitempty"`

	// seq
	Seq uint64 `json:"seq,omitempty"`

	// stage added
	StageAdded *ModelStageAddedEvent `json:"stage_added,omitempty"`

	// stage completed
	StageCompleted *ModelStageCompletedEvent `json:"stage_completed,omitempty"`

	// stage composed
	StageComposed *ModelStageComposedEvent `json:"stage_composed,omitempty"`
}

// Validate validates this model graph event
func (m *ModelGraphEvent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDelayScheduled(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateFaasInvocationCompleted(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateFaasInvocationStarted(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateGraphCommitted(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateGraphCompleted(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateGraphCreated(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateGraphTerminating(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStageAdded(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStageCompleted(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStageComposed(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelGraphEvent) validateDelayScheduled(formats strfmt.Registry) error {

	if swag.IsZero(m.DelayScheduled) { // not required
		return nil
	}

	if m.DelayScheduled != nil {

		if err := m.DelayScheduled.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("delay_scheduled")
			}
			return err
		}
	}

	return nil
}

func (m *ModelGraphEvent) validateFaasInvocationCompleted(formats strfmt.Registry) error {

	if swag.IsZero(m.FaasInvocationCompleted) { // not required
		return nil
	}

	if m.FaasInvocationCompleted != nil {

		if err := m.FaasInvocationCompleted.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("faas_invocation_completed")
			}
			return err
		}
	}

	return nil
}

func (m *ModelGraphEvent) validateFaasInvocationStarted(formats strfmt.Registry) error {

	if swag.IsZero(m.FaasInvocationStarted) { // not required
		return nil
	}

	if m.FaasInvocationStarted != nil {

		if err := m.FaasInvocationStarted.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("faas_invocation_started")
			}
			return err
		}
	}

	return nil
}

func (m *ModelGraphEvent) validateGraphCommitted(formats strfmt.Registry) error {

	if swag.IsZero(m.GraphCommitted) { // not required
		return nil
	}

	if m.GraphCommitted != nil {

		if err := m.GraphCommitted.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("graph_committed")
			}
			return err
		}
	}

	return nil
}

func (m *ModelGraphEvent) validateGraphCompleted(formats strfmt.Registry) error {

	if swag.IsZero(m.GraphCompleted) { // not required
		return nil
	}

	if m.GraphCompleted != nil {

		if err := m.GraphCompleted.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("graph_completed")
			}
			return err
		}
	}

	return nil
}

func (m *ModelGraphEvent) validateGraphCreated(formats strfmt.Registry) error {

	if swag.IsZero(m.GraphCreated) { // not required
		return nil
	}

	if m.GraphCreated != nil {

		if err := m.GraphCreated.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("graph_created")
			}
			return err
		}
	}

	return nil
}

func (m *ModelGraphEvent) validateGraphTerminating(formats strfmt.Registry) error {

	if swag.IsZero(m.GraphTerminating) { // not required
		return nil
	}

	if m.GraphTerminating != nil {

		if err := m.GraphTerminating.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("graph_terminating")
			}
			return err
		}
	}

	return nil
}

func (m *ModelGraphEvent) validateStageAdded(formats strfmt.Registry) error {

	if swag.IsZero(m.StageAdded) { // not required
		return nil
	}

	if m.StageAdded != nil {

		if err := m.StageAdded.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stage_added")
			}
			return err
		}
	}

	return nil
}

func (m *ModelGraphEvent) validateStageCompleted(formats strfmt.Registry) error {

	if swag.IsZero(m.StageCompleted) { // not required
		return nil
	}

	if m.StageCompleted != nil {

		if err := m.StageCompleted.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stage_completed")
			}
			return err
		}
	}

	return nil
}

func (m *ModelGraphEvent) validateStageComposed(formats strfmt.Registry) error {

	if swag.IsZero(m.StageComposed) { // not required
		return nil
	}

	if m.StageComposed != nil {

		if err := m.StageComposed.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stage_composed")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ModelGraphEvent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ModelGraphEvent) UnmarshalBinary(b []byte) error {
	var res ModelGraphEvent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
