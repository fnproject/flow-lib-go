// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// ModelErrorDatumType ErrorDatumType defines an internal error code generated within a flow
// swagger:model modelErrorDatumType
type ModelErrorDatumType string

const (
	// ModelErrorDatumTypeUnknownError captures enum value "unknown_error"
	ModelErrorDatumTypeUnknownError ModelErrorDatumType = "unknown_error"
	// ModelErrorDatumTypeStageTimeout captures enum value "stage_timeout"
	ModelErrorDatumTypeStageTimeout ModelErrorDatumType = "stage_timeout"
	// ModelErrorDatumTypeStageFailed captures enum value "stage_failed"
	ModelErrorDatumTypeStageFailed ModelErrorDatumType = "stage_failed"
	// ModelErrorDatumTypeFunctionTimeout captures enum value "function_timeout"
	ModelErrorDatumTypeFunctionTimeout ModelErrorDatumType = "function_timeout"
	// ModelErrorDatumTypeFunctionInvokeFailed captures enum value "function_invoke_failed"
	ModelErrorDatumTypeFunctionInvokeFailed ModelErrorDatumType = "function_invoke_failed"
	// ModelErrorDatumTypeStageLost captures enum value "stage_lost"
	ModelErrorDatumTypeStageLost ModelErrorDatumType = "stage_lost"
	// ModelErrorDatumTypeInvalidStageResponse captures enum value "invalid_stage_response"
	ModelErrorDatumTypeInvalidStageResponse ModelErrorDatumType = "invalid_stage_response"
)

// for schema
var modelErrorDatumTypeEnum []interface{}

func init() {
	var res []ModelErrorDatumType
	if err := json.Unmarshal([]byte(`["unknown_error","stage_timeout","stage_failed","function_timeout","function_invoke_failed","stage_lost","invalid_stage_response"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		modelErrorDatumTypeEnum = append(modelErrorDatumTypeEnum, v)
	}
}

func (m ModelErrorDatumType) validateModelErrorDatumTypeEnum(path, location string, value ModelErrorDatumType) error {
	if err := validate.Enum(path, location, value, modelErrorDatumTypeEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this model error datum type
func (m ModelErrorDatumType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateModelErrorDatumTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
