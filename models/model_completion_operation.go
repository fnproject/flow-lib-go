// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// ModelCompletionOperation CompletionOperation describes the type and behaviour of a stage of the graph
// swagger:model modelCompletionOperation
type ModelCompletionOperation string

const (
	// ModelCompletionOperationUnknownOperation captures enum value "unknown_operation"
	ModelCompletionOperationUnknownOperation ModelCompletionOperation = "unknown_operation"
	// ModelCompletionOperationAcceptEither captures enum value "acceptEither"
	ModelCompletionOperationAcceptEither ModelCompletionOperation = "acceptEither"
	// ModelCompletionOperationApplyToEither captures enum value "applyToEither"
	ModelCompletionOperationApplyToEither ModelCompletionOperation = "applyToEither"
	// ModelCompletionOperationThenAcceptBoth captures enum value "thenAcceptBoth"
	ModelCompletionOperationThenAcceptBoth ModelCompletionOperation = "thenAcceptBoth"
	// ModelCompletionOperationThenApply captures enum value "thenApply"
	ModelCompletionOperationThenApply ModelCompletionOperation = "thenApply"
	// ModelCompletionOperationThenRun captures enum value "thenRun"
	ModelCompletionOperationThenRun ModelCompletionOperation = "thenRun"
	// ModelCompletionOperationThenAccept captures enum value "thenAccept"
	ModelCompletionOperationThenAccept ModelCompletionOperation = "thenAccept"
	// ModelCompletionOperationThenCompose captures enum value "thenCompose"
	ModelCompletionOperationThenCompose ModelCompletionOperation = "thenCompose"
	// ModelCompletionOperationThenCombine captures enum value "thenCombine"
	ModelCompletionOperationThenCombine ModelCompletionOperation = "thenCombine"
	// ModelCompletionOperationWhenComplete captures enum value "whenComplete"
	ModelCompletionOperationWhenComplete ModelCompletionOperation = "whenComplete"
	// ModelCompletionOperationHandle captures enum value "handle"
	ModelCompletionOperationHandle ModelCompletionOperation = "handle"
	// ModelCompletionOperationSupply captures enum value "supply"
	ModelCompletionOperationSupply ModelCompletionOperation = "supply"
	// ModelCompletionOperationInvokeFunction captures enum value "invokeFunction"
	ModelCompletionOperationInvokeFunction ModelCompletionOperation = "invokeFunction"
	// ModelCompletionOperationCompletedValue captures enum value "completedValue"
	ModelCompletionOperationCompletedValue ModelCompletionOperation = "completedValue"
	// ModelCompletionOperationDelay captures enum value "delay"
	ModelCompletionOperationDelay ModelCompletionOperation = "delay"
	// ModelCompletionOperationAllOf captures enum value "allOf"
	ModelCompletionOperationAllOf ModelCompletionOperation = "allOf"
	// ModelCompletionOperationAnyOf captures enum value "anyOf"
	ModelCompletionOperationAnyOf ModelCompletionOperation = "anyOf"
	// ModelCompletionOperationExternalCompletion captures enum value "externalCompletion"
	ModelCompletionOperationExternalCompletion ModelCompletionOperation = "externalCompletion"
	// ModelCompletionOperationExceptionally captures enum value "exceptionally"
	ModelCompletionOperationExceptionally ModelCompletionOperation = "exceptionally"
	// ModelCompletionOperationTerminationHook captures enum value "terminationHook"
	ModelCompletionOperationTerminationHook ModelCompletionOperation = "terminationHook"
	// ModelCompletionOperationExceptionallyCompose captures enum value "exceptionallyCompose"
	ModelCompletionOperationExceptionallyCompose ModelCompletionOperation = "exceptionallyCompose"
)

// for schema
var modelCompletionOperationEnum []interface{}

func init() {
	var res []ModelCompletionOperation
	if err := json.Unmarshal([]byte(`["unknown_operation","acceptEither","applyToEither","thenAcceptBoth","thenApply","thenRun","thenAccept","thenCompose","thenCombine","whenComplete","handle","supply","invokeFunction","completedValue","delay","allOf","anyOf","externalCompletion","exceptionally","terminationHook","exceptionallyCompose"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		modelCompletionOperationEnum = append(modelCompletionOperationEnum, v)
	}
}

func (m ModelCompletionOperation) validateModelCompletionOperationEnum(path, location string, value ModelCompletionOperation) error {
	if err := validate.Enum(path, location, value, modelCompletionOperationEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this model completion operation
func (m ModelCompletionOperation) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateModelCompletionOperationEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
