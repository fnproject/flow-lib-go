// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// ModelDatum Datum encapusulates all possible values that may be associated with a stage in the flow graph
// swagger:model modelDatum
type ModelDatum struct {

	// blob
	Blob *ModelBlobDatum `json:"blob,omitempty"`

	// empty
	Empty ModelEmptyDatum `json:"empty,omitempty"`

	// error
	Error *ModelErrorDatum `json:"error,omitempty"`

	// http req
	HTTPReq *ModelHTTPReqDatum `json:"http_req,omitempty"`

	// http resp
	HTTPResp *ModelHTTPRespDatum `json:"http_resp,omitempty"`

	// stage ref
	StageRef *ModelStageRefDatum `json:"stage_ref,omitempty"`

	// status
	Status *ModelStatusDatum `json:"status,omitempty"`
}

// Validate validates this model datum
func (m *ModelDatum) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBlob(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateError(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateHTTPReq(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateHTTPResp(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStageRef(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ModelDatum) validateBlob(formats strfmt.Registry) error {

	if swag.IsZero(m.Blob) { // not required
		return nil
	}

	if m.Blob != nil {

		if err := m.Blob.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("blob")
			}
			return err
		}
	}

	return nil
}

func (m *ModelDatum) validateError(formats strfmt.Registry) error {

	if swag.IsZero(m.Error) { // not required
		return nil
	}

	if m.Error != nil {

		if err := m.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("error")
			}
			return err
		}
	}

	return nil
}

func (m *ModelDatum) validateHTTPReq(formats strfmt.Registry) error {

	if swag.IsZero(m.HTTPReq) { // not required
		return nil
	}

	if m.HTTPReq != nil {

		if err := m.HTTPReq.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("http_req")
			}
			return err
		}
	}

	return nil
}

func (m *ModelDatum) validateHTTPResp(formats strfmt.Registry) error {

	if swag.IsZero(m.HTTPResp) { // not required
		return nil
	}

	if m.HTTPResp != nil {

		if err := m.HTTPResp.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("http_resp")
			}
			return err
		}
	}

	return nil
}

func (m *ModelDatum) validateStageRef(formats strfmt.Registry) error {

	if swag.IsZero(m.StageRef) { // not required
		return nil
	}

	if m.StageRef != nil {

		if err := m.StageRef.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stage_ref")
			}
			return err
		}
	}

	return nil
}

func (m *ModelDatum) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if m.Status != nil {

		if err := m.Status.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ModelDatum) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ModelDatum) UnmarshalBinary(b []byte) error {
	var res ModelDatum
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
