// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// ModelStatusDatumType StateDatumType describes the state of a stage or graph
// swagger:model modelStatusDatumType
type ModelStatusDatumType string

const (
	// ModelStatusDatumTypeUnknownState captures enum value "unknown_state"
	ModelStatusDatumTypeUnknownState ModelStatusDatumType = "unknown_state"
	// ModelStatusDatumTypeSucceeded captures enum value "succeeded"
	ModelStatusDatumTypeSucceeded ModelStatusDatumType = "succeeded"
	// ModelStatusDatumTypeFailed captures enum value "failed"
	ModelStatusDatumTypeFailed ModelStatusDatumType = "failed"
	// ModelStatusDatumTypeCancelled captures enum value "cancelled"
	ModelStatusDatumTypeCancelled ModelStatusDatumType = "cancelled"
	// ModelStatusDatumTypeKilled captures enum value "killed"
	ModelStatusDatumTypeKilled ModelStatusDatumType = "killed"
)

// for schema
var modelStatusDatumTypeEnum []interface{}

func init() {
	var res []ModelStatusDatumType
	if err := json.Unmarshal([]byte(`["unknown_state","succeeded","failed","cancelled","killed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		modelStatusDatumTypeEnum = append(modelStatusDatumTypeEnum, v)
	}
}

func (m ModelStatusDatumType) validateModelStatusDatumTypeEnum(path, location string, value ModelStatusDatumType) error {
	if err := validate.Enum(path, location, value, modelStatusDatumTypeEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this model status datum type
func (m ModelStatusDatumType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateModelStatusDatumTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
