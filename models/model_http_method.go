// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// ModelHTTPMethod HTTPMethod defines a specific HTTP method
// swagger:model modelHTTPMethod
type ModelHTTPMethod string

const (
	// ModelHTTPMethodUnknownMethod captures enum value "unknown_method"
	ModelHTTPMethodUnknownMethod ModelHTTPMethod = "unknown_method"
	// ModelHTTPMethodGet captures enum value "get"
	ModelHTTPMethodGet ModelHTTPMethod = "get"
	// ModelHTTPMethodHead captures enum value "head"
	ModelHTTPMethodHead ModelHTTPMethod = "head"
	// ModelHTTPMethodPost captures enum value "post"
	ModelHTTPMethodPost ModelHTTPMethod = "post"
	// ModelHTTPMethodPut captures enum value "put"
	ModelHTTPMethodPut ModelHTTPMethod = "put"
	// ModelHTTPMethodDelete captures enum value "delete"
	ModelHTTPMethodDelete ModelHTTPMethod = "delete"
	// ModelHTTPMethodOptions captures enum value "options"
	ModelHTTPMethodOptions ModelHTTPMethod = "options"
	// ModelHTTPMethodPatch captures enum value "patch"
	ModelHTTPMethodPatch ModelHTTPMethod = "patch"
)

// for schema
var modelHttpMethodEnum []interface{}

func init() {
	var res []ModelHTTPMethod
	if err := json.Unmarshal([]byte(`["unknown_method","get","head","post","put","delete","options","patch"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		modelHttpMethodEnum = append(modelHttpMethodEnum, v)
	}
}

func (m ModelHTTPMethod) validateModelHTTPMethodEnum(path, location string, value ModelHTTPMethod) error {
	if err := validate.Enum(path, location, value, modelHttpMethodEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this model HTTP method
func (m ModelHTTPMethod) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateModelHTTPMethodEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
