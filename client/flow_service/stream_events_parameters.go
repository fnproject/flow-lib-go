// Code generated by go-swagger; DO NOT EDIT.

package flow_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewStreamEventsParams creates a new StreamEventsParams object
// with the default values initialized.
func NewStreamEventsParams() *StreamEventsParams {
	var ()
	return &StreamEventsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewStreamEventsParamsWithTimeout creates a new StreamEventsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewStreamEventsParamsWithTimeout(timeout time.Duration) *StreamEventsParams {
	var ()
	return &StreamEventsParams{

		timeout: timeout,
	}
}

// NewStreamEventsParamsWithContext creates a new StreamEventsParams object
// with the default values initialized, and the ability to set a context for a request
func NewStreamEventsParamsWithContext(ctx context.Context) *StreamEventsParams {
	var ()
	return &StreamEventsParams{

		Context: ctx,
	}
}

// NewStreamEventsParamsWithHTTPClient creates a new StreamEventsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewStreamEventsParamsWithHTTPClient(client *http.Client) *StreamEventsParams {
	var ()
	return &StreamEventsParams{
		HTTPClient: client,
	}
}

/*StreamEventsParams contains all the parameters to send to the API endpoint
for the stream events operation typically these are written to a http.Request
*/
type StreamEventsParams struct {

	/*FlowID*/
	FlowID string
	/*FromSeq*/
	FromSeq *uint64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the stream events params
func (o *StreamEventsParams) WithTimeout(timeout time.Duration) *StreamEventsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the stream events params
func (o *StreamEventsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the stream events params
func (o *StreamEventsParams) WithContext(ctx context.Context) *StreamEventsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the stream events params
func (o *StreamEventsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the stream events params
func (o *StreamEventsParams) WithHTTPClient(client *http.Client) *StreamEventsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the stream events params
func (o *StreamEventsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFlowID adds the flowID to the stream events params
func (o *StreamEventsParams) WithFlowID(flowID string) *StreamEventsParams {
	o.SetFlowID(flowID)
	return o
}

// SetFlowID adds the flowId to the stream events params
func (o *StreamEventsParams) SetFlowID(flowID string) {
	o.FlowID = flowID
}

// WithFromSeq adds the fromSeq to the stream events params
func (o *StreamEventsParams) WithFromSeq(fromSeq *uint64) *StreamEventsParams {
	o.SetFromSeq(fromSeq)
	return o
}

// SetFromSeq adds the fromSeq to the stream events params
func (o *StreamEventsParams) SetFromSeq(fromSeq *uint64) {
	o.FromSeq = fromSeq
}

// WriteToRequest writes these params to a swagger request
func (o *StreamEventsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param flow_id
	if err := r.SetPathParam("flow_id", o.FlowID); err != nil {
		return err
	}

	if o.FromSeq != nil {

		// query param from_seq
		var qrFromSeq uint64
		if o.FromSeq != nil {
			qrFromSeq = *o.FromSeq
		}
		qFromSeq := swag.FormatUint64(qrFromSeq)
		if qFromSeq != "" {
			if err := r.SetQueryParam("from_seq", qFromSeq); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
