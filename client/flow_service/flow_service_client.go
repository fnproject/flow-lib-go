// Code generated by go-swagger; DO NOT EDIT.

package flow_service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new flow service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for flow service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
AddDelay add delay API
*/
func (a *Client) AddDelay(params *AddDelayParams) (*AddDelayOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddDelayParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AddDelay",
		Method:             "POST",
		PathPattern:        "/v1/flows/{flow_id}/delay",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AddDelayReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AddDelayOK), nil

}

/*
AddInvokeFunction add invoke function API
*/
func (a *Client) AddInvokeFunction(params *AddInvokeFunctionParams) (*AddInvokeFunctionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddInvokeFunctionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AddInvokeFunction",
		Method:             "POST",
		PathPattern:        "/v1/flows/{flow_id}/invoke",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AddInvokeFunctionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AddInvokeFunctionOK), nil

}

/*
AddStage add stage API
*/
func (a *Client) AddStage(params *AddStageParams) (*AddStageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddStageParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AddStage",
		Method:             "POST",
		PathPattern:        "/v1/flows/{flow_id}/stage",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AddStageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AddStageOK), nil

}

/*
AddValueStage add value stage API
*/
func (a *Client) AddValueStage(params *AddValueStageParams) (*AddValueStageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddValueStageParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AddValueStage",
		Method:             "POST",
		PathPattern:        "/v1/flows/{flow_id}/value",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AddValueStageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AddValueStageOK), nil

}

/*
AwaitStageResult await stage result API
*/
func (a *Client) AwaitStageResult(params *AwaitStageResultParams) (*AwaitStageResultOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAwaitStageResultParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AwaitStageResult",
		Method:             "GET",
		PathPattern:        "/v1/flows/{flow_id}/stages/{stage_id}/await",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AwaitStageResultReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AwaitStageResultOK), nil

}

/*
Commit commit API
*/
func (a *Client) Commit(params *CommitParams) (*CommitOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCommitParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Commit",
		Method:             "POST",
		PathPattern:        "/v1/flows/{flow_id}/commit",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CommitReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CommitOK), nil

}

/*
CompleteStageExternally complete stage externally API
*/
func (a *Client) CompleteStageExternally(params *CompleteStageExternallyParams) (*CompleteStageExternallyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCompleteStageExternallyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CompleteStageExternally",
		Method:             "POST",
		PathPattern:        "/v1/flows/{flow_id}/stages/{stage_id}/complete",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CompleteStageExternallyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CompleteStageExternallyOK), nil

}

/*
CreateGraph create graph API
*/
func (a *Client) CreateGraph(params *CreateGraphParams) (*CreateGraphOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateGraphParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateGraph",
		Method:             "POST",
		PathPattern:        "/v1/flows",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateGraphReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateGraphOK), nil

}

/*
GetGraphState get graph state API
*/
func (a *Client) GetGraphState(params *GetGraphStateParams) (*GetGraphStateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGraphStateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetGraphState",
		Method:             "GET",
		PathPattern:        "/v1/flows/{flow_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetGraphStateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetGraphStateOK), nil

}

/*
StreamEvents stream events API
*/
func (a *Client) StreamEvents(params *StreamEventsParams) (*StreamEventsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStreamEventsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StreamEvents",
		Method:             "GET",
		PathPattern:        "/v1/flows/{flow_id}/stream",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &StreamEventsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*StreamEventsOK), nil

}

/*
StreamLifecycle stream lifecycle API
*/
func (a *Client) StreamLifecycle(params *StreamLifecycleParams) (*StreamLifecycleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStreamLifecycleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "StreamLifecycle",
		Method:             "GET",
		PathPattern:        "/v1/stream",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &StreamLifecycleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*StreamLifecycleOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
